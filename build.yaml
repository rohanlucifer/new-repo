name: CI/CD-pipeline

on:
    push:
        branches: ['main', 'develop', 'prod', 'newprod']
    pull_request:
        branches: ['main', 'develop', 'prod', 'newprod']  
jobs
    develop-build:
        runs-on: ubuntu-latest
        if: contains('refs/heads/develop',github.ref)
        steps:
            - uses: actions/checkout@v2
              with:
                token : ${{secrets.ACCESS_TOKEN}}
                submodules : true
            - name: Configure AWS Credentials For Develop
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: us-east-2

            - name: Login to Amazon ECR
              id: login-ecr-develop
              uses: aws-actions/amazon-ecr-login@v1
              if: contains('refs/heads/develop',github.ref)

            - name: Build, tag, and push image to  ECR machine-trader
              env:
                  ECR_REGISTRY: ${{ steps.login-ecr-develop.outputs.registry }}
                  ECR_REPOSITORY_MTRADER: machine-trader
              run: |
                  ls
                  git submodule update --init --recursive
                  docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_MTRADER:${GITHUB_SHA::7} -f Dockerfile .
                  docker push $ECR_REGISTRY/$ECR_REPOSITORY_MTRADER:${GITHUB_SHA::7}
            - name: Clone  PRIVATE repository
              uses: GuillaumeFalourd/clone-github-repo-action@v1
              with:
                  owner: 'predictivetechnologysystems'
                  repository: 'helmcharts'
                  access-token: ${{ secrets.ACCESS_TOKEN }}

            - name: Kubernets set context
              uses: azure/k8s-set-context@v2
              with:
                  method: kubeconfig
                  kubeconfig: ${{ secrets.KUBE_CONFIG }}

            - name: deploy
              run: |
                  ls
                  cd helmcharts
                  ls
                  helm upgrade --set=image.tag=${GITHUB_SHA::7} machine-trader machine-trader
            - name: Notify slack success
              if: success()
              env:
                  SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
              uses: Discontract/github-action-slack-notify-deployment@v1
              with:
                  channel: github-actions-alerting
                  channel_id: C030GS75NP2
                  status: SUCCESS
                  color: good

            - name: Notify slack fail
              if: failure()
              env:
                  SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
              uses: Discontract/github-action-slack-notify-deployment@v1
              with:
                  channel: github-actionis-alerting
                  channel_id: C030GS75NP2
                  status: FAILED
                  color: danger
    prod-build:
        runs-on: ubuntu-latest
        if: contains('refs/heads/prod',github.ref)
        steps:
            - uses: actions/checkout@v2
            - name: Configure AWS Credentials for prod
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
                  aws-region: us-east-2

            - name: Login to Amazon ECR
              id: login-ecr-prod
              uses: aws-actions/amazon-ecr-login@v1
              if: contains('refs/heads/prod',github.ref)

            - name: Build, tag, and push image to  ECR machine-trader
              env:
                  ECR_REGISTRY_PROD: ${{ steps.login-ecr-prod.outputs.registry }}
                  ECR_REPOSITORY_MTRADER_PROD: machine-trader-prod
              run: |
                  docker build -t $ECR_REGISTRY_PROD/$ECR_REPOSITORY_MTRADER_PROD:${GITHUB_SHA::7} -f Dockerfile-prod .
                  docker push $ECR_REGISTRY_PROD/$ECR_REPOSITORY_MTRADER_PROD:${GITHUB_SHA::7}
            - name: Clone  PRIVATE repository
              uses: GuillaumeFalourd/clone-github-repo-action@v1
              with:
                  owner: 'predictivetechnologysystems'
                  repository: 'helmcharts'
                  access-token: ${{ secrets.ACCESS_TOKEN }}

            - name: Kubernets set context
              uses: azure/k8s-set-context@v2
              with:
                  method: kubeconfig
                  kubeconfig: ${{ secrets.KUBE_CONFIG_PROD }}

            - name: deploy
              run: |
                  ls
                  cd helmcharts
                  ls
                  helm upgrade --set=image.tag=${GITHUB_SHA::7} machine-trader-prod machine-trader-prod
            - name: Notify slack success
              if: success()
              env:
                  SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
              uses: Discontract/github-action-slack-notify-deployment@v1
              with:
                  channel: github-actions-alerting
                  channel_id: C030GS75NP2
                  status: SUCCESS
                  color: good

            - name: Notify slack fail
              if: failure()
              env:
                  SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
              uses: Discontract/github-action-slack-notify-deployment@v1
              with:
                  channel: github-actionis-alerting
                  channel_id: C030GS75NP2
                  status: FAILED
                  color: danger

    newprod-build:
        runs-on: ubuntu-latest
        environment:
              name: newprod
              url: 'https://app.machinetrader.io'
        if: contains('refs/heads/newprod',github.ref)
        steps:
            - uses: actions/checkout@v2
            - uses: trstringer/manual-approval@v1
              with:
                secret: ${{ github.TOKEN }}
                approvers: sarosejoshi
            - name: Configure AWS Credentials for newprod
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_NEWPROD }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_NEWPROD }}
                  aws-region: us-east-2

            - name: Login to Amazon ECR
              id: login-ecr-newprod
              uses: aws-actions/amazon-ecr-login@v1
              if: contains('refs/heads/newprod',github.ref)

            - name: Build, tag, and push image to  ECR machine-trader
              env:
                  ECR_REGISTRY_PROD: ${{ steps.login-ecr-newprod.outputs.registry }}
                  ECR_REPOSITORY_MTRADER_PROD: machine-trader-prod
              run: |
                  ls
                  git submodule update --init --recursive
                  docker build -t $ECR_REGISTRY_PROD/$ECR_REPOSITORY_MTRADER_PROD:${GITHUB_SHA::7} -f Dockerfile .
                  docker push $ECR_REGISTRY_PROD/$ECR_REPOSITORY_MTRADER_PROD:${GITHUB_SHA::7}
            - name: Clone  PRIVATE repository
              uses: GuillaumeFalourd/clone-github-repo-action@v1
              with:
                  owner: 'predictivetechnologysystems'
                  repository: 'helmcharts'
                  access-token: ${{ secrets.ACCESS_TOKEN }}

            - name: Kubernets set context
              uses: azure/k8s-set-context@v2
              with:
                  method: kubeconfig
                  kubeconfig: ${{ secrets.KUBE_CONFIG_NEWPROD }}

            - name: deploy
              run: |
                  ls
                  cd helmcharts
                  ls
                  #     helm upgrade --set=image.tag=${GITHUB_SHA::7} machine-trader machine-trader
                  helm upgrade machine-trader machine-trader  -f machine-trader/prod-values.yaml
            - name: Notify slack success
              if: success()
              env:
                  SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
              uses: Discontract/github-action-slack-notify-deployment@v1
              with:
                  channel: github-actions-alerting
                  channel_id: C030GS75NP2
                  status: SUCCESS
                  color: good

            - name: Notify slack fail
              if: failure()
              env:
                  SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
              uses: Discontract/github-action-slack-notify-deployment@v1
              with:
                  channel: github-actionis-alerting
                  channel_id: C030GS75NP2
                  status: FAILED
                  color: danger

    notify:
        name: Notify on Slack
        runs-on: ubuntu-latest
        # Only run this workflow when "build" workflow succeeds
        needs: [develop-build] 
        # Only run this workflow if it target is main branch on pull_request event.
        if: ${{ github.base_ref == 'develop' && github.event_name == 'pull_request' }}

        steps:
            - uses: abinoda/slack-action@master
              env:
                  SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
              with:
                  # custom message to send to slack
                  args: '{\"channel\":\"${{ secrets.SLACK_PR_CHANNEL_ID }}\",\"blocks\":[{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"*Pull Request:* ${{ github.event.pull_request.title }}\"}},{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"*Contributor :* ${{ github.event.pull_request.user.login }}\n*Request State:* ${{ github.event.pull_request.state }}\"}},{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"<${{ github.event.pull_request.html_url }}|View Pull Request>\"}}]}'

              # Pick up events even if the job is success.
              if: success()
